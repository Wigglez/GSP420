#include "CoreIO.h"


FileHandler::FileHandler()
{
}
FileHandler::~FileHandler()
{
}
///////////////////////////////////////////////////////////////////////////////////
//Open A File to be read
///////////////////////////////////////////////////////////////////////////////////
FilePointer FileHandler::OpenFile_r(String filename)
{
	FilePointer fp;
	File *stream, *errono;

	const Char * mode = "r";
	const Char * cFilename = filename.c_str();
	

	if( (stream = fopen(cFilename, mode)) == NULL)
	{
		/////////////////////////////////////////
		//Error File was not opended
		/////////////////////////////////////////
		errono = (File*)EBADF;
		fp.fp = errono;

		perror("Open For Read Error");
		system("PAUSE");
		return fp;
	}
	else
	{
		/////////////////////////////////////////
		//File Was opened
		/////////////////////////////////////////

		fp.fp = stream;

	
		return fp;
	}
}
FilePointer FileHandler::OpenFile_r(FileDescriptor fd)
{
	FilePointer fp;
	File *stream, *errono;
	const Char * mode = "r+";
	
	
	if( (stream = _fdopen(fd.fd, mode)) == NULL)
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		errono = (File*)EBADF;
		fp.fp = errono;

		printf("ERROR: Bad File Pointer");

		return fp;
	}
	else
	{
		/////////////////////////////////////////
		//File opened
		/////////////////////////////////////////

		fp.fp = stream;

		return fp;
	}
}
///////////////////////////////////////////////////////////////////////////////////
//Open A File to be written to
///////////////////////////////////////////////////////////////////////////////////
FilePointer FileHandler::OpenFile_w(String filename)
{
	FilePointer fp;
	File *stream, *errono;

	const Char * mode = "w";
	const Char * cFilename = filename.c_str();


	if( (stream = fopen(cFilename, mode)) == NULL)
	{
		/////////////////////////////////////////
		//Error File was not opended
		/////////////////////////////////////////
		errono = (File*)EBADF;
		fp.fp = errono;

		perror("Open For Read Error");
		system("PAUSE");
		return fp;
	}
	else
	{
		/////////////////////////////////////////
		//File Was opened
		/////////////////////////////////////////

		fp.fp = stream;
	
		return fp;
	}
}
FilePointer FileHandler::OpenFile_w(FileDescriptor fd)
{
	FilePointer fp;
	File *stream, *errono;
	const Char *mode = "w";
	
	
	if( (stream = _fdopen(fd.fd, mode)) == NULL)
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		errono = (File*)EBADF;
		fp.fp = errono;

		printf("ERROR: Bad File Pointer");

		return fp;
		
	}
	else
	{
		/////////////////////////////////////////
		//File opened
		/////////////////////////////////////////

		fp.fp = stream;

		return fp;
	}
}
///////////////////////////////////////////////////////////////////////////////////
//Open A File to be appended
///////////////////////////////////////////////////////////////////////////////////
FilePointer FileHandler::OpenFile_a(String filename)
{
	FilePointer fp;
	File *stream, *errono;

	const Char * mode = "a";
	const Char * cFilename = filename.c_str();


	if( (stream = fopen(cFilename, mode)) == NULL)
	{
		/////////////////////////////////////////
		//Error File was not opended
		/////////////////////////////////////////
		errono = (File*)EBADF;
		fp.fp = errono;

		perror("Open For Read Error");
		system("PAUSE");
		return fp;
	}
	else
	{
		/////////////////////////////////////////
		//File Was opened
		/////////////////////////////////////////

		fp.fp = stream;

	
		return fp;
	}
}
FilePointer FileHandler::OpenFile_a(FileDescriptor fd)
{
	FilePointer fp;
	File *stream;
	const Char * mode = "a";

	
	if( (stream = _fdopen(fd.fd, mode)) == NULL)
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////

		errno = EBADF;
		

		printf("ERROR: Bad File Pointer");

		return fp;
	}
	else
	{
		/////////////////////////////////////////
		//File opened
		/////////////////////////////////////////
		fp.fp = stream;


		return fp;
	}
}

///////////////////////////////////////////////////////////////////////////////////
//Close A Specific File
///////////////////////////////////////////////////////////////////////////////////
Int FileHandler::CloseFile(FilePointer Stream)
{

	//if FilePointer is not NULL
	if(Stream.fp != NULL)
	{
		fclose(Stream.fp);
		return 0;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		perror("Null FilePointer");
		return EOF;
	}

	

	
}
Int FileHandler::CloseFile(FileDescriptor fd)
{

	if(fd.fd != NULL)
	{
		_close(fd.fd);

		return 0;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		return EOF;
	}

}

///////////////////////////////////////////////////////////////////////////////////
//Close All Files
///////////////////////////////////////////////////////////////////////////////////
Int FileHandler::CloseAllFiles()
{
	Int NumberClosed;
	NumberClosed = _fcloseall();

	return NumberClosed;
}

///////////////////////////////////////////////////////////////////////////////////
//Read A File
///////////////////////////////////////////////////////////////////////////////////
uInt FileHandler::ReadFile(Void * buffer, uInt size, uInt count, FilePointer Stream)
{
	//////////////////////////////////////////////////////
	//ToDo: Error Checking
	//////////////////////////////////////////////////////

	uInt numRead;

	if(Stream.fp != NULL)
	{
		numRead = fread(buffer, size, count, Stream.fp);
		return numRead;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		printf("Error: NULL FilePointer\n");
		system("PAUSE");
		return EOF;
		
	}

	return EOF;
}
Int FileHandler::ReadFile(FileDescriptor fd, Void * buffer, uInt count)
{
	Int BytesRead;

	if((BytesRead = _read(fd.fd, buffer, count)) <= 0)
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		return EOF;
	}
	else
	{
		return BytesRead;
	}

}

///////////////////////////////////////////////////////////////////////////////////
//Write A File
///////////////////////////////////////////////////////////////////////////////////
uInt FileHandler::WriteFile(const Void * buffer, uInt size, uInt count, FilePointer Stream)
{
	uInt numWritten;
	
	numWritten = fwrite(buffer, size, count, Stream.fp);
	if(numWritten != -1)
	{
		/////////////////////////////////////////
		//Succesful Write
		/////////////////////////////////////////
		
		return numWritten;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		return EOF;
		
	}

}
Int FileHandler::WriteFile(FileDescriptor fd, const Void * buffer, uInt count)
{
	Int numWritten;
	(numWritten = _write(fd.fd, buffer,count));
	if(numWritten != -1)
	{
		return numWritten;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		return EOF;
		
	}


}

///////////////////////////////////////////////////////////////////////////////////
//Seek A File
//Parameter: FilePointer Stream, Long offset, Int origin
//origin must be one of the following constants: 
//												 SEEK_CUR(Seeks From current Location)
//												 SEEK_END(Seeks From the End of File)
//												 SEEK_SET(Seeks From the begining of the file)
///////////////////////////////////////////////////////////////////////////////////
Int FileHandler::Seek(FilePointer Stream, Long offset, Int origin)
{

	Int result;
	
	if(origin > end)
	{
		printf("Error: Invalid parameter origin", origin);
		return result;
	}
	if(Stream.fp != NULL)
	{
		switch(origin)
		{
		case begining:
			result = fseek(Stream.fp, offset, begining);
			if(result)
			{
				/////////////////////////////////////////
				//Error
				/////////////////////////////////////////
				perror("Seek Failed");
				return EOF;
			}
			else
			{
				return result;
			}
			break;
		case current:
			result = fseek(Stream.fp, offset, current);
			if(result)
			{
				/////////////////////////////////////////
				//Error
				/////////////////////////////////////////
				perror("Seek Failed");
				return EOF;
			}
			else
			{
				return result;
			}
			break;
		case end:
			result = fseek(Stream.fp, offset, end);
			if(result)
			{
				/////////////////////////////////////////
				//Error
				/////////////////////////////////////////
				perror("Seek Failed");
				return EOF;
			}
			else
			{
				return result;
			}
			break;
		}
	}
	return EOF;

}
Long FileHandler::Seek(FileDescriptor fd, Long offset, Int origin)
{
	Long pos;

	pos = _lseek(fd.fd, offset, origin);
	if(pos == -1L)
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		return EOF;
	}
	else
	{
		return pos;
	}

}

///////////////////////////////////////////////////////////////////////////////////
//Find Length of A File
///////////////////////////////////////////////////////////////////////////////////
Long FileHandler::FileLength(FileDescriptor fd)
{
	Long length;
	if(fd.fd != NULL)
	{
		length = _filelength(fd.fd);
		return length;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		printf("NULL FileDescriptor");
		return EOF;
	}
	
}

///////////////////////////////////////////////////////////////////////////////////
//Lock A File
///////////////////////////////////////////////////////////////////////////////////
Void FileHandler::LockFile(FilePointer Stream)
{
	if(Stream.fp != NULL)
	{
		_lock_file(Stream.fp);
		return;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		printf("ERROR: Bad File Pointer");
		return;
	}
	
}

///////////////////////////////////////////////////////////////////////////////////
//Unlock a FIle
///////////////////////////////////////////////////////////////////////////////////
Void FileHandler::UnlockFile(FilePointer Stream)
{
	if(Stream.fp != NULL)
	{
		_unlock_file(Stream.fp);
		return;
	}
	else
	{
		/////////////////////////////////////////
		//Error
		/////////////////////////////////////////
		printf("ERROR: Bad File Pointer");
		return;
	}
}

///////////////////////////////////////////////////////////////////////////////////
//File Descriptor Class Functions
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//File Descriptor Constructor
///////////////////////////////////////////////////////////////////////////////////
FileDescriptor::FileDescriptor()
{
	fd = NULL;
}
///////////////////////////////////////////////////////////////////////////////////
//File Descriptor Destructor
///////////////////////////////////////////////////////////////////////////////////
FileDescriptor::~FileDescriptor()
{
}
///////////////////////////////////////////////////////////////////////////////////
//File Descriptor Gets a File Descriptor from a FilePointer
///////////////////////////////////////////////////////////////////////////////////
FileDescriptor FileDescriptor::GetFileDescriptor(FilePointer Stream)
{
	FileDescriptor fd;
	
		fd.fd = _fileno(Stream.fp);
	
		return fd;
	
	
}

///////////////////////////////////////////////////////////////////////////////////
//File Pointer Class Functions
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//File Pointer Constructor
///////////////////////////////////////////////////////////////////////////////////
FilePointer::FilePointer()
{
	fp = NULL;
}
///////////////////////////////////////////////////////////////////////////////////
//File Pointer Destructor
///////////////////////////////////////////////////////////////////////////////////
FilePointer::~FilePointer()
{
}
