#ifndef __COREIO_H__
#define __COREIO_H__

#include "Typedefs.h"
#include <stdio.h>
#include <io.h>
class FileHandler
{
private:
	friend class FilePointer;
	friend class FileDescriptor;
protected:

public:
	//////////////////////////////////////////////////////////////////////////
	// Name:		FileHandler
	// Parameters:	None
	// Return:		None
	// Description:	Default Constructor
	//////////////////////////////////////////////////////////////////////////
	FileHandler();

	//////////////////////////////////////////////////////////////////////////
	// Name:		FileHandler
	// Parameters:	None
	// Return:		None
	// Description:	Default Destructor
	//////////////////////////////////////////////////////////////////////////
	~FileHandler();

	//////////////////////////////////////////////////////////////////////////
	// Name:		OpenFile_r
	// Parameters:	(String, FileDescriptor)
	// Return:		FilePointer
	// Description:	Opens a file for reading
	//////////////////////////////////////////////////////////////////////////
	FilePointer OpenFile_r(String filename);
	FilePointer OpenFile_r(FileDescriptor fd);

	//////////////////////////////////////////////////////////////////////////
	// Name:		OpenFile_w
	// Parameters:	(String, FileDescriptor)
	// Return:		FilePointer
	// Description:	Opens a file for writing
	//////////////////////////////////////////////////////////////////////////
	FilePointer OpenFile_w(String filename);
	FilePointer OpenFile_w(FileDescriptor fd);

	//////////////////////////////////////////////////////////////////////////
	// Name:		OpenFile_a
	// Parameters:	(String, FileDescriptor)
	// Return:		FilePointer
	// Description:	Opens a file for appending
	//////////////////////////////////////////////////////////////////////////
	FilePointer OpenFile_a(String filename);
	FilePointer OpenFile_a(FileDescriptor fd);

	//////////////////////////////////////////////////////////////////////////
	// Name:		CloseFile
	// Parameters:	(FilePointer, FileDescriptor)
	// Return:		Int
	// Description:	Closes a specific file
	//////////////////////////////////////////////////////////////////////////
	Int CloseFile(FilePointer Stream);
	Int CloseFile(FileDescriptor fd);

	//////////////////////////////////////////////////////////////////////////
	// Name:		CloseAllFile
	// Parameters:	None
	// Return:		Int
	// Description:	Closes all files
	//////////////////////////////////////////////////////////////////////////
	Int CloseAllFiles();

	//////////////////////////////////////////////////////////////////////////
	// Name:		ReadFile
	// Parameters:	(Void *, uInt, uInt, FilePointer)
	// Parameters:  (FileDescriptor, Void *, uInt)
	// Return:		uInt, Int
	// Description:	Reads a File
	//////////////////////////////////////////////////////////////////////////
	uInt ReadFile(Void * buffer, uInt size, uInt count, FilePointer Stream);
	Int ReadFile(FileDescriptor fd, Void * buffer, uInt count);

	//////////////////////////////////////////////////////////////////////////
	// Name:		WriteFile
	// Parameters:	(Void *, uInt, uInt, FilePointer)
	// Parameters:  (FileDescriptor, const Void *, uInt)
	// Return:		uInt, Int
	// Description:	Writes to a File
	//////////////////////////////////////////////////////////////////////////
	uInt WriteFile(const Void * buffer, uInt size, uInt count, FilePointer Stream);
	Int WriteFile(FileDescriptor fd, const Void * buffer, uInt count);

	//////////////////////////////////////////////////////////////////////////
	// Name:		Seek
	// Parameters:	(FilePointer, Long, Int)
	// Parameters:  (FileDescriptor, Long, Int)
	// Return:		Int, Long
	// Description:	Seeks a File
	//////////////////////////////////////////////////////////////////////////
	Int Seek(FilePointer Stream, Long offset, Int origin);
	Long Seek(FileDescriptor fd, Long offset, Int origin);

	//////////////////////////////////////////////////////////////////////////
	// Name:		FileLength
	// Parameters:  (FileDescriptor)
	// Return:		Long
	// Description:	Gets the lenth of a file
	//////////////////////////////////////////////////////////////////////////
	Long FileLength(FileDescriptor fd);

	//////////////////////////////////////////////////////////////////////////
	// Name:		LockFile
	// Parameters:  (FilePointer)
	// Return:		Void
	// Description:	Locks a File
	//////////////////////////////////////////////////////////////////////////
	Void LockFile(FilePointer Stream);

	//////////////////////////////////////////////////////////////////////////
	// Name:		UnlockFile
	// Parameters:  (FilePointer)
	// Return:		Void
	// Description:	UnLocks a File
	//////////////////////////////////////////////////////////////////////////
	Void UnlockFile(FilePointer Stream);
};

////////////////////////////////////////////////////////////////////////////////////////
//File Pointer Class
////////////////////////////////////////////////////////////////////////////////////////
class FilePointer
{
private:
	friend class FileDescriptor;
	friend class FileHandler;
	File* fp;
protected:
public:
	//////////////////////////////////////////////////////////////////////////
	// Name:		FilePointer
	// Parameters:	None
	// Return:		None
	// Description:	Default Constructor
	//////////////////////////////////////////////////////////////////////////
	FilePointer();
	//////////////////////////////////////////////////////////////////////////
	// Name:		FilePointer
	// Parameters:	None
	// Return:		None
	// Description:	Default Destructor
	//////////////////////////////////////////////////////////////////////////
	~FilePointer();
};

///////////////////////////////////////////////////////////////////////////////////////
//File Descriptor Class
///////////////////////////////////////////////////////////////////////////////////////
class FileDescriptor
{
private:
	friend class FilePointer;
	friend class FileHandler;
	Int fd;
protected:
public:
	//////////////////////////////////////////////////////////////////////////
	// Name:		FileDescriptor
	// Parameters:	None
	// Return:		None
	// Description:	Default Constructor
	//////////////////////////////////////////////////////////////////////////
	FileDescriptor();
	//////////////////////////////////////////////////////////////////////////
	// Name:		FileDescriptor
	// Parameters:	None
	// Return:		None
	// Description:	Default Destructor
	//////////////////////////////////////////////////////////////////////////
	~FileDescriptor();
	//////////////////////////////////////////////////////////////////////////
	// Name:		GetFileDescriptor
	// Parameters:	FilePointer
	// Return:		FileDescriptor
	// Description:	Gets the FileDescriptor of a file from a FilePointer
	//////////////////////////////////////////////////////////////////////////
	FileDescriptor GetFileDescriptor(FilePointer Stream);
	
};

#endif __COREIO_H__